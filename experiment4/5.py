"""
计算公式：求cos(x)的近似值
【问题描述】
给定一个精度值e，用下列公式计算cos(x)的近似值，要求前后两次迭代之差的绝对值小于e，给出相应的最小迭代次数n和最后一次计算的cos(x)值。
cos(x)=x0/0!-x2/2!+x4/4!-x6/6!+......+(-1)nx2n/((2n)!)  (来自C题库）
【输入形式】
从控制台输入x( -6.28<=x<=6.28 )和e( e>=0.00001 )的值，以一个空格分隔。
【输出形式】
输出迭代次数n和最后一次计算的cos(x)的值（以一个空格分隔，并且输出cos(x)时要求小数点后保留7位有效数字）。
【样例输入】
5.1  0.00001
【样例输出】
11  0.3779776
【样例说明】
输入的x为5.1，精度值e为0.00001。当n为9时，利用上述公式计算cos(x)的值为0.3779226，n为10时计算的结果为0.3779809，两结果之差的绝对值约为0.000058，大于要求的精度值0.00001，故需要继续迭代计算。当n为11时计算的结果为0.3779776，与n为10的计算结果之差的绝对值约为0.000003，小于要求的精度值，所以最小迭代次数应为11，最后一次计算的cos(x)的值为0.3779776（小数点后保留7位有效数字）。
注意：
(1) 为保证计算精度，请使用浮点数据类型（实型）保存计算数据。
(2) 应至少迭代两次，即：n>=1。
【评分标准】
该题要求输出最小迭代次数和cos(x)的近似值。
"""

import math


# 计算阶乘函数
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


# 主函数
def main():
    # 从控制台读入x和e的值
    x, e = map(float, input().split())

    # 初始化变量
    last_value = 0
    current_value = x
    n = 0

    while abs(current_value - last_value) >= e:
        last_value = current_value
        n += 1
        current_value += (-1) ** n * (x ** (2 * n)) / factorial(2 * n)

    print(n, "{:.7f}".format(current_value))


# 调用主函数
if __name__ == "__main__":
    main()

